@using Microsoft.JSInterop
@implements IAsyncDisposable


<div @ref="_host"
     style="width:100%; height:@($"{HeightPx}px"); border-radius:12px; overflow:hidden; background:@Background;">
</div>

@code {
    private ElementReference _host;
    private IJSObjectReference? _module;
    private IJSObjectReference? _instance;

    [Inject] IJSRuntime JS { get; set; } = default!;

    /// Path to model under wwwroot (e.g. "models/ship.fbx" or "models/Scene.obj")
    [Parameter, EditorRequired] public string Src { get; set; } = default!;

    /// Optional companion .mtl for OBJ files (e.g. "models/Scene.mtl")
    [Parameter] public string? Mtl { get; set; }

    /// Background CSS color (e.g. "#0f0f12" or "transparent")
    [Parameter] public string Background { get; set; } = "#0f0f12";

    /// Height of the viewport in pixels
    [Parameter] public int HeightPx { get; set; } = 520;

    /// Slowly rotate when idle
    [Parameter] public bool AutoRotate { get; set; } = true;

    /// Optional scale applied to the root model (helpful for FBX units)
    [Parameter] public double ModelScale { get; set; } = 1.0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/three-viewport.js");
            _instance = await _module.InvokeAsync<IJSObjectReference>(
                "createThreeViewport",
                _host,
                new
                {
                    src = Src.Replace("\\", "/"),
                    mtl = string.IsNullOrWhiteSpace(Mtl) ? null : Mtl!.Replace("\\", "/"),
                    background = Background,
                    autoRotate = AutoRotate,
                    modelScale = ModelScale
                }
            );
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_instance is not null) await _instance.InvokeVoidAsync("dispose");
            if (_module is not null) await _module.DisposeAsync();
        }
        catch { /* no-op on dispose */ }
    }
}